# Server port
server.port=8089

# Spring Kafka Streams
spring.kafka.streams.application-id=customer-balance-application

# Application name
spring.application.name=customer-balance-service

# Kafka producer
spring.kafka.producer.client-id=spring-kafka-producer

# Kafka properties
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.properties.schema.registry.url=http://localhost:8081
spring.kafka.consumer.group-id=customer-balance-consumer-group
spring.kafka.consumer.auto-offset-reset=earliest

# Kafka deserializers/serializers
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=io.confluent.kafka.serializers.KafkaAvroSerializer

# Kafka topics
kafka.customer.topic=Customer
kafka.balance.topic=Balance
kafka.customer.balance.topic=CustomerBalance

# Bindings
spring.cloud.stream.bindings.input-channel-customer.destination=${kafka.customer.topic}
spring.cloud.stream.bindings.input-channel-balance.destination=${kafka.balance.topic}
spring.cloud.stream.bindings.output-channel-customer-balance.destination=${kafka.customer.balance.topic}

# Kafka Streams binder
spring.cloud.stream.kafka.streams.binder.configuration.application.server=localhost:8080
spring.cloud.stream.kafka.streams.binder.configuration.commit.interval.ms=1000

# Additional Topics
spring.cloud.stream.kafka.streams.binder.configuration.default.topic.replication.factor=1
spring.cloud.stream.kafka.streams.binder.configuration.default.topic.num.partitions=1
spring.cloud.stream.kafka.streams.binder.configuration.default.topic.segment.bytes=1048576
spring.cloud.stream.kafka.streams.binder.configuration.default.topic.cleanup.policy=compact
spring.cloud.stream.kafka.streams.binder.configuration.default.topic.retention.ms=-1
